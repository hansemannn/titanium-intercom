/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.intercom;

import androidx.annotation.NonNull;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import io.intercom.android.sdk.Intercom;
import io.intercom.android.sdk.IntercomContent;
import io.intercom.android.sdk.IntercomError;
import io.intercom.android.sdk.IntercomSpace;
import io.intercom.android.sdk.IntercomStatusCallback;
import io.intercom.android.sdk.UserAttributes;
import io.intercom.android.sdk.identity.Registration;
import io.intercom.android.sdk.push.IntercomPushClient;

@Kroll.module(name="TitaniumIntercom", id="ti.intercom")
public class TitaniumIntercomModule extends KrollModule {

	private IntercomPushClient pushClient = new IntercomPushClient();

	@Kroll.method
	public void configure(KrollDict params) {
		String apiKey = params.getString("apiKey");
		String appId = params.getString("appId");

		Intercom.initialize(TiApplication.getAppRootOrCurrentActivity().getApplication(), apiKey, appId);
	}

	@Kroll.setProperty
	public void setVisible(boolean visible) {
		Intercom.client().setLauncherVisibility(visible ? Intercom.Visibility.VISIBLE : Intercom.Visibility.GONE);
	}

	@Kroll.setProperty
	public void setBottomPadding(int bottomPadding) {
		Intercom.client().setBottomPadding(bottomPadding);
	}

	@Kroll.setProperty
	public void setUserHash(String userHash) {
		if (userHash != null) {
			Intercom.client().setUserHash(userHash);
		}
	}

	@Kroll.method
	public void registerUser(@Kroll.argument(optional = true) KrollDict user) {
		if (user == null) {
			Intercom.client().loginUnidentifiedUser(new IntercomStatusCallback() {
				@Override
				public void onSuccess() {
					// Add success callback?
				}

				@Override
				public void onFailure(@NonNull IntercomError intercomError) {
					// Add error callback?
				}
			});
			return;
		}

		String userId = user.getString("identifier");
		String email = user.getString("email");
		Registration userRegistration = Registration.create().withUserId(userId);

		if (email != null) {
			userRegistration = userRegistration.withEmail(email);
		}

		Intercom.client().loginIdentifiedUser(userRegistration, new IntercomStatusCallback() {
			@Override
			public void onSuccess() {
				// Add success callback?
			}

			@Override
			public void onFailure(@NonNull IntercomError intercomError) {
				// Add error callback?
			}
		});
	}

	@Kroll.method
    public void updateUser(KrollDict user) {
		String id = user.getString("id");
		String email = user.getString("email");
		String name = user.getString("name");
		String locale = user.getString("locale");
		KrollDict customAttributes = user.getKrollDict("customAttributes");

		UserAttributes.Builder userAttributes = new UserAttributes.Builder();

		if (id != null) {
			userAttributes = userAttributes.withUserId(id);
		}

		if (email != null) {
			userAttributes = userAttributes.withEmail(email);
		}

		if (name != null) {
			userAttributes = userAttributes.withName(name);
		}

		if (locale != null) {
			userAttributes = userAttributes.withLanguageOverride(locale);
		}

		if (customAttributes != null) {
			userAttributes = userAttributes.withCustomAttributes(customAttributes);
		}

		Intercom.client().updateUser(userAttributes.build(), new IntercomStatusCallback() {
			@Override
			public void onSuccess() {
				// Add success callback?
			}

			@Override
			public void onFailure(@NonNull IntercomError intercomError) {
				// Add error callback?
			}
		});
	}

	@Kroll.method
	public void logout() {
		Intercom.client().logout();
	}

	@Kroll.method
	public void presentMessenger(@Kroll.argument(optional = true) String message) {
		if (message != null) {
			Intercom.client().displayMessageComposer(message);
		} else {
			Intercom.client().present();
		}
	}

	@Kroll.method
	public void presentMessageComposer(String message) {
		Log.w("TiIntercom", "presentMessageComposer has been deprecated - please use presentMessenger instead");
		presentMessenger(message);
	}

	@Kroll.method
	public void presentCarousel(String carouselId) {
		Intercom.client().presentContent(new IntercomContent.Carousel(carouselId));
	}

	@Kroll.method
	public void presentHelpCenter() {
		Intercom.client().present(IntercomSpace.HelpCenter);
	}

	@Kroll.method
	public void updatePushToken(String pushToken) {
		if (pushToken == null) {
			pushToken = ""; // Reset token to empty string if deleted
		}

		pushClient.sendTokenToIntercom(TiApplication.getInstance(), pushToken);
	}
}

